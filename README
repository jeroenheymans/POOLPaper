***********************
* General Information *
***********************
This repository contains all the code necessary for the paper where I compare two programming languages. This paper is written for the course Principles of Object Oriented Languages, which is a master-course on the Vrije Universiteit Brussel.
This paper is written by me, Jeroen Heymans.

***********
* Roadmap *
***********
23/12/2011
At the moment, the suggestion is send to the assistant and the professor. I proposed the comparison of Ruby and C++

24/12/2011
The proposition to compare Ruby and C++ is accepted

***********************
* Subjects to discuss *
***********************
 - class-based inheritance (multiple vs. mix-in)
    - multiple (C++):
        - explicit reference to super
        - virtual inheritance
    - mix-in (Ruby)
 - polymorphism
 - static vs. dynamic typing
    - Dynamic Dispatch = Late Binding (Ruby)
    vs
    - Static Dispatch = Early Binding (C++)
    - Single Dispatch = Message Passing (Ruby & C++)
 - interfaces?
 - clonable objects
 - reflection
 - everything is (not) an object
 - compare behaviour of super
 - compare behaviour of this/self 
 - partial classes (Ruby) vs "complete classes" (C++)
 - access control (public, protected, private, ?)
 
*********************
* Interesting links *
*********************
http://onestepback.org/articles/poly/
http://www.google.be/url?sa=t&rct=j&q=ruby%20c%2B%2B%20object%20oriented%20comparison&source=web&cd=30&ved=0CHAQFjAJOBQ&url=http%3A%2F%2Fwww.itescam.edu.mx%2Fprincipal%2Fsylabus%2Ffpdb%2Frecursos%2Fr76064.PPTX&ei=PKz1TsKsJ4_qOd-ombUB&usg=AFQjCNEo1PvHO8jlN6dhPZtyrClQcOIRWg&sig2=EZutaIAK2XtTZQw_Jw5hKw
http://www.wellho.net/resources/C234.html

*********************
* Language features *
*********************
Ruby
    Paradigms: object-oriented, imperative, reflective, functional
    Scope: lexical, sometimes dynamic
    Typing: duck, dynamic
    Runtime access to method names: yes
    Runtime access to class names: yes
    Runtime access to isntance variable names: yes
    Forwarding: yes
    Metaclasses: yes
    Inheritance: mix-in
    Access to super method: super
    Root class: Object
    Receiver name: self
    Private data: yes
    Private methods: yes
    Class variables: yes
    Templates: not needed
    Namespaces: modules
    Visibility/Access Controls: Public, protected, private (instance)
    
C++
    Paradigms: object-oriented, procedural, generic
    Scope: global or local
    Typing: static
    Runtime access to method names: no
    Runtime access to class names: no
    Runtime access to isntance variable names: no
    Forwarding: no
    Metaclasses: no
    Inheritance: multiple
    Access to super method: Superclass::method
    Root class: none
    Receiver name: this
    Private data: yes
    Private methods: yes
    Class variables: yes
    Templates: yes
    Namespaces: yes
    Visibility/Access Controls:	Public, protected, private, and friends
    
http://www.ruby-lang.org/en/documentation/ruby-from-other-languages/to-ruby-from-c-and-c-/
    Unlike C++, in Ruby,... 
       * There’s no explicit references. That is, in Ruby, every variable is just an automatically 
         dereferenced name for some object.
       * Objects are strongly but dynamically typed. The runtime discovers at runtime if that method 
         call actually works.
       * The “constructor” is called initialize instead of the class name.
       * All methods are always virtual.
       * “Class” (static) variable names always begin with @@ (as in @@total_widgets).
       * You don’t directly access member variables—all access to public member variables (known in 
         Ruby as attributes) is via methods.
       * It’s self instead of this.
       * Some methods end in a ’?’ or a ’!’. It’s actually part of the method name.
       * There’s no multiple inheritance per se. Though Ruby has “mixins” (i.e. you can “inherit” all 
         instance methods of a module).
       * There are some enforced case-conventions (ex. class names start with a capital letter, 
         variables start with a lowercase letter).
       * Parentheses for method calls are usually optional.
       * You can re-open a class anytime and add more methods.
       * There’s no need of C++ templates (since you can assign any kind of object to a given variable, 
         and types get figured out at runtime anyway). No casting either.
       * Iteration is done a bit differently. In Ruby, you don’t use a separate iterator object (like
         vector<T>::const_iterator iter) but instead your objects may mixin the Enumerator module and just 
         make a method call like my_obj.each.
       * There’s only two container types: Array and Hash.
       * There’s no type conversions. With Ruby though, you’ll probably find that they aren’t necessary.
       * Multithreading is built-in, but as of Ruby 1.8 they are “green threads” (implemented only within 
         the interpreter) as opposed to native threads.
       * A unit testing lib comes standard with Ruby.
